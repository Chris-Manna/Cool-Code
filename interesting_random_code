min_num = nil
[65,3,100,42,-7].each do |num|
   min_num = min_num == nil || min_num > num ? num : min_num
end
puts min_num    #=> -7

######################################################################
#using inject
min_answer = [65,3,100,42,-7].inject do |min_num, num| 
   min_num =  min_num > num ? num : min_num
end      
puts min_answer #=> -7

######################################################################
#fib sequence
arr = [0,1]
18.times do
    arr << arr[-2] + arr[-1]
end  

######################################################################
#fib sequence using inject
arr = 18.times.inject([0,1]) do |a, idx|
    a << a[-2] + a[-1]
end
puts arr.join(', ')
#=> 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181

######################################################################

#convert two-d array into hash
data_arr = [['dog', 'Fido'], ['cat', 'Whiskers'], ['fish', 'Fluffy']]

data_hash = {}
data_arr.each do |d|
    data_hash[d[0]] = d[1]
end

######################################################################
#convert two-d array into hash using inject
data_arr = [['dog', 'Fido'], ['cat', 'Whiskers'], ['fish', 'Fluffy']]

data_hash = data_arr.inject({}) do |hsh, v|
    hsh[v[0]] = v[1]
    hsh
end

######################################################################
# Creating our own Collect method - go into the Array Class to do this
class Array
  def iterate!
    self.each_with_index do |n, i|
      self[i] = yield(n)
    end
  end
end

array = [1, 2, 3, 4]

array.iterate! do |n|
  n ** 2
end

puts array.inspect

# => [1, 4, 9, 16]
######################################################################
# multiply two numbers a number of times
def multiply_by x,y,n
  (1..n).map {|i| x * y**i}
end

######################################################################
# I don't understand how flatten works / why zip should work in the definition of the method
def zip first, second
  first.zip(second).flatten(1)
end

######################################################################
# user: Beast
def unused_digits(*args)
  (('0'..'9').to_a - args.join.chars).join  
end

######################################################################
#ColbyDauph
def sum_eq_n?(arr, n)
  arr.empty? and n == 0 or arr.any? { |v| arr.include?(n - v) }
end
#this code is absolutely brilliant
######################################################################
def to_h list
  h = Hash.new()
  list.each { |elmt| h[elmt[0]] = elmt[1] }
  h
end

######################################################################
require 'prime'

def first_n_primes(n)
  # Check for correct input!
  "n must be an integer" unless n.is_a? Integer
  "n must be greater than 0" if n <= 0

  # The Ruby 1.9 Prime class makes the array automatically!
  prime = Prime.instance
  prime.first n
end

first_n_primes(10002)

pn = Pathname.getwd
module Action
  def jump
    @distance = rand(4) + 2
    puts "I jumped forward #{@distance} feet!"
  end
end

class Rabbit
  include Action
  attr_reader :name
  def initialize(name)
    @name = name
  end
end

class Cricket
  include Action
  attr_reader :name
  def initialize(name)
    @name = name
  end
end

peter = Rabbit.new("Peter")
jiminy = Cricket.new("Jiminy")

peter.jump
jiminy.jump

######################################################################
pn = Pathname.getwd
